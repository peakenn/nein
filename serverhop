local gameId = 15502339080
local minimumPlayers = 22

local function getLowestPingServer(servers)
    local lowestPingServer = nil
    local lowestPing = math.huge
    
    for i, server in ipairs(servers) do
        if server.ping < lowestPing and server.playing >= minimumPlayers then
            lowestPingServer = server
            lowestPing = server.ping
        end
    end
    
    return lowestPingServer
end

local function serverHop()
    repeat wait() until game:IsLoaded()
    
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true" 
    local req = request({ Url = string.format(sfUrl, gameId, "Desc", 100) }) 
    local body = game:GetService("HttpService"):JSONDecode(req.Body) 
    local deep = math.random(1, 3)
    
    if deep > 1 then 
        for i = 1, deep, 1 do 
            req = request({ Url = string.format(sfUrl .. "&cursor=" .. body.nextPageCursor, gameId, "Desc", 100) }) 
            body = game:GetService("HttpService"):JSONDecode(req.Body) 
            task.wait(0.1)
        end 
    end
    
    local servers = {} 
    if body and body.data then 
        for i, v in next, body.data do 
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, v)
            end
        end
    end
    
    local lowestPingServer = getLowestPingServer(servers)
    
    if lowestPingServer then
        game:GetService("TeleportService"):TeleportToPlaceInstance(gameId, lowestPingServer.id, game:GetService("Players").LocalPlayer) 
    else
        print("No suitable server found.")
    end
end

while wait(1) do
    serverHop()
end
